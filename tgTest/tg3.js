import { Telegraf, Markup } from 'telegraf';
import crypto from 'crypto';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf('7730895131:AAGnU5zBgJ32jaKvClohwfa3MQvqkFjck7c');

// –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
const users = {};

// –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º –∫–∞–∑–∏–Ω–æ 5%
const COEFFICIENTS = [
  1.14,   // 5/6
  1.1875, // 4/5
  1.2667, // 3/4
  1.425,  // 2/3
  1.9     // 1/2
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
const getKeyboard = (isGameActive) => {
  if (isGameActive) {
    return Markup.keyboard([
      ['–°—Ç—Ä–µ–ª—è—Ç—å', '–ó–∞–±—Ä–∞—Ç—å'],
      ['–ë–∞–ª–∞–Ω—Å']
    ]).resize();
  } else {
    return Markup.keyboard([
      ['–°—Ç—Ä–µ–ª—è—Ç—å', '–ü–æ—Å—Ç–∞–≤–∏—Ç—å 100'],
      ['–ë–∞–ª–∞–Ω—Å']
    ]).resize();
  }
};

bot.start((ctx) => {
  const userId = ctx.from.id;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
  if (!users[userId]) {
    users[userId] = {
      balance: 1000,
      currentBet: 0,
      currentStep: 0,
      gameActive: false,
      potentialWin: 0
    };
  }

  ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!', getKeyboard(false));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–æ–∫
bot.hears(/–ü–æ—Å—Ç–∞–≤–∏—Ç—å (\d+)/, (ctx) => {
  const userId = ctx.from.id;
  const user = users[userId];
  const betAmount = parseInt(ctx.match[1]);

  if (user.balance < betAmount) {
    return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
  }

  user.currentBet = betAmount;
  user.currentStep = 0;
  user.balance -= betAmount;
  user.gameActive = false;
  user.potentialWin = 0;

  ctx.reply(`–°—Ç–∞–≤–∫–∞ ${betAmount} –ø—Ä–∏–Ω—è—Ç–∞! `);
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–±—Ä–∞—Ç—å"
bot.hears('–ó–∞–±—Ä–∞—Ç—å', (ctx) => {
  const userId = ctx.from.id;
  const user = users[userId];

  if (!user.currentBet || !user.gameActive) {
    return ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!');
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
  const currentCoefficient = COEFFICIENTS[user.currentStep - 1];
  const winAmount = Math.floor(user.currentBet * currentCoefficient);
  
  // –ó–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –Ω–∞ –±–∞–ª–∞–Ω—Å
  user.balance += winAmount;
  
  // –û–±–Ω—É–ª—è–µ–º —Å—Ç–∞–≤–∫—É –∏ —à–∞–≥
  user.currentBet = 0;
  user.currentStep = 0;
  user.gameActive = false;
  user.potentialWin = 0;
  
  ctx.reply(`–í—ã –∑–∞–±—Ä–∞–ª–∏ –≤—ã–∏–≥—Ä—ã—à ${winAmount}! –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance}`, getKeyboard(false));
});

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤
bot.hears('–°—Ç—Ä–µ–ª—è—Ç—å', async (ctx) => {
  const userId = ctx.from.id;
  const user = users[userId];

  if (!user.currentBet) {
    return ctx.reply('–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É!');
  }

  const currentStep = user.currentStep;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥
  if (currentStep >= COEFFICIENTS.length) {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
    const maxCoefficient = COEFFICIENTS[COEFFICIENTS.length - 1];
    const maxWin = Math.floor(user.currentBet * maxCoefficient);
    
    // –ó–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –Ω–∞ –±–∞–ª–∞–Ω—Å
    user.balance += maxWin;
    
    // –û–±–Ω—É–ª—è–µ–º —Å—Ç–∞–≤–∫—É –∏ —à–∞–≥
    user.currentBet = 0;
    user.currentStep = 0;
    user.gameActive = false;
    user.potentialWin = 0;
    
    return ctx.reply(`üéâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à ${maxWin}! –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance}`, getKeyboard(false));
  }

  // –õ–æ–≥–∏–∫–∞ –≤—ã—Å—Ç—Ä–µ–ª–∞
  const randomNumber = crypto.randomInt(1, 6 - currentStep);
  const isHit = randomNumber === 1;

  if (isHit) {
    const lostBet = user.currentBet;
    user.currentBet = 0;
    user.currentStep = 0;
    user.gameActive = false;
    user.potentialWin = 0;
    
    await ctx.replyWithAnimation({ source: 'shoot.mp4' });
    // –ñ–¥–µ–º 6 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    await delay(6000);
    ctx.reply(`üí• –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –°—Ç–∞–≤–∫–∞ ${lostBet} —Å–≥–æ—Ä–µ–ª–∞.`, getKeyboard(false));
  } else {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–≥
    user.currentStep = currentStep + 1;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
    const currentCoefficient = COEFFICIENTS[currentStep];
    const potentialWin = Math.floor(user.currentBet * currentCoefficient);
    user.potentialWin = potentialWin;
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞
    user.gameActive = true;

    await ctx.replyWithAnimation({ source: 'miss.mp4' });
    // –ñ–¥–µ–º 6 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    await delay(6000);
    
    if (user.currentStep < COEFFICIENTS.length) {
      const nextCoefficient = COEFFICIENTS[user.currentStep];
      const nextPotentialWin = Math.floor(user.currentBet * nextCoefficient);
      
      ctx.reply(
        `üéØ –£—Å–ø–µ—à–Ω–æ! –¢–µ–∫—É—â–∏–π –≤—ã–∏–≥—Ä—ã—à: ${potentialWin} (${user.currentBet} √ó ${currentCoefficient}). –°–ª–µ–¥—É—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${nextCoefficient} (${nextPotentialWin})`,
        getKeyboard(true)
      );
    } else {
      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞–≥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
      ctx.reply(
        `üéØ –£—Å–ø–µ—à–Ω–æ! –¢–µ–∫—É—â–∏–π –≤—ã–∏–≥—Ä—ã—à: ${potentialWin} (${user.currentBet} √ó ${currentCoefficient}). –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!`,
        getKeyboard(true)
      );
    }
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
bot.hears('–ë–∞–ª–∞–Ω—Å', (ctx) => {
  const userId = ctx.from.id;
  const user = users[userId];
  
  let message = `–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance}`;
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
  if (user.gameActive && user.potentialWin > 0) {
    message += `\n–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: ${user.potentialWin}`;
  }
  
  ctx.reply(message);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞)
bot.on('text', (ctx) => {
  const userId = ctx.from.id;
  const user = users[userId];
  const input = ctx.message.text.trim();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ–º
  if (!isNaN(input) && input > 0) {
    const betAmount = parseInt(input);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
    if (user.balance < betAmount) {
      return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
    }

    // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    user.currentBet = betAmount;
    user.currentStep = 0;
    user.balance -= betAmount;
    user.gameActive = false;
    user.potentialWin = 0;

    ctx.reply(`–°—Ç–∞–≤–∫–∞ ${betAmount} –ø—Ä–∏–Ω—è—Ç–∞! –¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${COEFFICIENTS[0]}`);
  }
});

bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');